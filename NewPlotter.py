import matplotlib.pyplot as plt
import numpy as np

# ---------------------------
# 1) Data for the 64-gangs run
# ---------------------------
basic_core_util_64 = np.mean([46.2707182320442, 51.93370165745856, 50.41436464088398, 56.62983425414365, 50.41436464088398, 55.24861878453039, 55.52486187845304, 57.87292817679558, 43.92265193370166, 39.77900552486188, 44.751381215469614, 32.32044198895028, 44.889502762430936, 53.31491712707182, 47.3756906077348, 47.09944751381215, 55.52486187845304, 38.67403314917127, 49.033149171270715, 41.988950276243095, 40.055248618784525, 51.79558011049724, 37.29281767955801, 39.08839779005525, 45.85635359116022, 50.0, 51.51933701657458, 46.54696132596685, 43.508287292817684, 38.950276243093924, 51.51933701657458, 51.93370165745856, 52.48618784530387, 21.54696132596685, 36.87845303867403, 31.629834254143645, 17.955801104972377, 27.071823204419886, 23.066298342541437, 19.613259668508288, 19.88950276243094, 29.005524861878452, 20.58011049723757, 19.88950276243094, 7.320441988950275, 2.7624309392265194, 3.7292817679558015, 3.591160220994475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
modified_core_util_64 = np.mean([51.355932203389834, 67.45762711864407, 44.91525423728814, 78.98305084745762, 62.20338983050847, 61.694915254237294, 62.881355932203384, 55.08474576271186, 60.67796610169491, 48.644067796610166, 63.72881355932203, 50.50847457627119, 52.3728813559322, 58.47457627118644, 64.57627118644068, 67.11864406779661, 46.271186440677965, 57.28813559322033, 62.03389830508475, 62.54237288135593, 49.83050847457628, 55.59322033898305, 49.66101694915254, 63.22033898305085, 51.186440677966104, 64.0677966101695, 67.28813559322035, 62.03389830508475, 51.864406779661024, 47.45762711864407, 46.779661016949156, 54.40677966101695, 54.40677966101695, 26.949152542372882, 52.20338983050847, 33.89830508474576, 32.71186440677966, 26.440677966101696, 38.813559322033896, 31.186440677966104, 27.288135593220336, 26.779661016949152, 30.16949152542373, 26.949152542372882, 7.966101694915253, 9.830508474576272, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
basic_throughput_64 = 0.21
modified_throughput_64 = 0.26
basic_gang_response_64 = np.mean([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120])
modified_gang_response_64 = np.mean([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120])
basic_gang_turnaround_64 = np.mean([480, 576, 565, 561, 458, 170, 595, 457, 466, 348, 479, 344, 467, 584, 586, 561, 501, 493, 323, 516, 562, 642, 495, 395, 397, 371, 673, 376, 574, 590, 582, 567, 213, 508, 692, 630, 396, 544, 612, 632, 645, 276, 259, 691, 434, 421, 110, 415, 549, 422, 635, 641, 700, 637, 667, 309, 639, 724, 669, 449, 551, 604, 634])
modified_gang_turnaround_64 = np.mean([471, 469, 460, 521, 455, 170, 480, 457, 346, 348, 463, 341, 360, 463, 477, 450, 461, 448, 237, 471, 492, 506, 487, 395, 394, 239, 553, 230, 518, 511, 506, 496, 213, 505, 494, 547, 381, 489, 488, 516, 515, 276, 252, 544, 431, 418, 110, 415, 545, 422, 561, 541, 590, 579, 564, 309, 558, 553, 572, 312, 423, 559, 580])
basic_gang_waiting_64 = np.mean([200.0, 360.0, 300.0, 213.33333333333334, 266.6666666666667, 120.0, 320.0, 280.0, 266.6666666666667, 210.0, 220.0, 240.0, 293.3333333333333, 310.0, 320.0, 333.3333333333333, 240.0, 293.3333333333333, 240.0, 360.0, 320.0, 300.0, 360.0, 280.0, 280.0, 280.0, 440.0, 280.0, 380.0, 346.6666666666667, 340.0, 300.0, 160.0, 360.0, 306.6666666666667, 330.0, 280.0, 360.0, 320.0, 346.6666666666667, 360.0, 200.0, 200.0, 440.0, 320.0, 290.0, 80.0, 320.0, 373.3333333333333, 260.0, 413.3333333333333, 360.0, 440.0, 386.6666666666667, 410.0, 240.0, 340.0, 400.0, 440.0, 360.0, 380.0, 340.0, 400.0])
modified_gang_waiting_64 = np.mean([165.5, 225.5, 247.5, 200.0, 256.3333333333333, 120.0, 275.6666666666667, 279.5, 224.0, 208.75, 191.25, 237.0, 171.66666666666666, 240.0, 265.5, 245.33333333333334, 218.25, 233.66666666666666, 154.0, 315.0, 267.3333333333333, 232.0, 352.0, 280.0, 275.0, 149.0, 320.0, 134.0, 297.0, 314.6666666666667, 302.0, 249.5, 160.0, 357.0, 238.33333333333334, 294.75, 265.0, 280.75, 253.0, 289.0, 270.0, 200.0, 193.0, 293.0, 317.0, 253.75, 80.0, 320.0, 312.0, 258.5, 388.3333333333333, 282.3333333333333, 330.0, 365.3333333333333, 325.25, 240.0, 268.5, 291.5, 363.0, 223.0, 289.5, 317.0, 369.5])

# ---------------------------
# 2) Data for the 83-gangs run
# ---------------------------
basic_core_util_83 = np.mean([55.42035398230089, 49.557522123893804, 39.491150442477874, 51.10619469026548, 54.64601769911505, 53.429203539823014, 54.424778761061944, 46.1283185840708, 50.66371681415929, 53.09734513274337, 50.995575221238944, 49.557522123893804, 49.889380530973455, 44.57964601769911, 30.641592920353983, 42.69911504424779, 44.57964601769911, 40.376106194690266, 47.78761061946903, 48.56194690265487, 49.11504424778761, 48.56194690265487, 48.11946902654867, 44.02654867256637, 50.995575221238944, 43.47345132743363, 52.54424778761062, 46.68141592920354, 46.68141592920354, 47.123893805309734, 46.570796460176986, 54.64601769911505, 47.34513274336283, 57.9646017699115, 50.22123893805309, 34.623893805309734, 43.80530973451327, 28.42920353982301, 49.00442477876106, 33.29646017699115, 22.123893805309734, 24.225663716814157, 15.376106194690264, 10.287610619469026, 4.977876106194691, 8.738938053097344, 4.756637168141593, 0.33185840707964603, 0.0, 3.8716814159292032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
modified_core_util_83 = np.mean([52.39948119325552, 66.14785992217898, 48.63813229571984, 68.48249027237354, 61.348897535667966, 58.754863813229576, 62.905317769130995, 64.07263294422827, 66.53696498054474, 57.32814526588845, 61.99740596627756, 55.12321660181583, 53.43709468223087, 50.3242542153048, 50.97276264591439, 60.18158236057069, 51.75097276264592, 51.49156939040207, 51.36186770428015, 62.2568093385214, 64.85084306095979, 58.2360570687419, 55.382619974059665, 60.05188067444877, 49.15693904020752, 44.22827496757458, 50.713359273670555, 61.608300907911804, 46.69260700389105, 49.6757457846952, 56.809338521400775, 39.29961089494164, 53.17769130998703, 71.33592736705577, 42.4124513618677, 49.6757457846952, 43.96887159533074, 48.119325551232166, 46.69260700389105, 36.57587548638132, 28.27496757457847, 36.057068741893644, 12.97016861219196, 17.898832684824903, 12.710765239948119, 2.7237354085603114, 11.284046692607005, 5.188067444876784, 3.24254215304799, 0.0, 1.8158236057068744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
basic_throughput_83 = 0.23
modified_throughput_83 = 0.27
basic_gang_response_83 = np.mean([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 200, 200, 200])
modified_gang_response_83 = np.mean([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 200, 200, 200])
basic_gang_turnaround_83 = np.mean([591, 724, 889, 636, 403, 830, 440, 613, 617, 240, 419, 814, 455, 626, 280, 601, 475, 760, 758, 632, 456, 904, 266, 887, 479, 765, 606, 788, 255, 858, 660, 785, 773, 783, 878, 647, 505, 501, 786, 643, 875, 672, 680, 676, 784, 641, 695, 789, 686, 688, 711, 335, 884, 538, 885, 867, 709, 552, 148, 812, 852, 704, 705, 555, 828, 389, 863, 895, 734, 814, 760, 397, 575, 598, 850, 564, 730, 892, 430, 726, 826, 882, 828])
modified_gang_turnaround_83 = np.mean([659, 226, 646, 643, 278, 798, 679, 272, 467, 464, 511, 280, 669, 663, 493, 769, 508, 690, 827, 698, 707, 699, 518, 511, 699, 319, 689, 693, 827, 718, 823, 818, 709, 293, 534, 552, 805, 707, 525, 557, 713, 537, 814, 810, 868, 829, 810, 759, 357, 753, 594, 824, 756, 726, 822, 737, 810, 732, 740, 580, 373, 375, 724, 584, 604, 607, 378, 782, 779, 601, 788, 784, 819, 771, 619, 792, 621, 797, 796, 631, 826, 673, 675, 233, 678, 466, 802, 472, 761, 795, 473, 662, 770])
basic_gang_waiting_83 = np.mean([310.0, 400.0, 493.3333333333333, 400.0, 320.0, 410.0, 213.33333333333334, 480.0, 320.0, 160.0, 320.0, 370.0, 226.66666666666666, 280.0, 200.0, 400.0, 360.0, 460.0, 533.3333333333334, 420.0, 360.0, 600.0, 200.0, 510.0, 360.0, 426.6666666666667, 420.0, 466.6666666666667, 200.0, 500.0, 426.6666666666667, 530.0, 453.3333333333333, 506.6666666666667, 640.0, 520.0, 400.0, 320.0, 600.0, 520.0, 640.0, 333.3333333333333, 520.0, 520.0, 440.0, 400.0, 453.3333333333333, 440.0, 430.0, 420.0, 350.0, 280.0, 540.0, 360.0, 410.0, 600.0, 426.6666666666667, 360.0, 120.0, 640.0, 550.0, 420.0, 440.0, 380.0, 520.0, 320.0, 520.0, 560.0, 460.0, 520.0, 470.0, 320.0, 480.0, 320.0, 640.0, 400.0, 470.0, 620.0, 360.0, 540.0, 533.3333333333334, 626.6666666666666, 500.0])
modified_gang_waiting_83 = np.mean([305.75, 372.6666666666667, 316.6666666666667, 294.25, 133.0, 319.25, 204.66666666666666, 297.0, 183.66666666666666, 275.0, 326.6666666666667, 179.0, 440.0, 455.5, 294.0, 296.25, 274.5, 303.25, 597.0, 368.25, 342.25, 475.5, 264.6666666666667, 396.6666666666667, 438.25, 237.5, 345.3333333333333, 312.6666666666667, 373.5, 460.0, 384.5, 515.0, 378.5, 236.0, 440.0, 340.3333333333333, 426.75, 457.3333333333333, 440.0, 423.0, 365.3333333333333, 293.5, 448.0, 504.0, 496.5, 399.25, 503.25, 532.0, 277.0, 448.3333333333333, 389.5, 425.6666666666667, 598.0, 438.6666666666667, 562.0, 463.3333333333333, 494.0, 488.75, 460.0, 351.0, 320.0, 314.0, 556.0, 376.0, 516.5, 420.0, 320.0, 569.5, 640.0, 520.0, 560.0, 550.6666666666666, 581.3333333333334, 472.0, 439.5, 498.25, 502.0, 484.5, 556.0, 412.0, 545.5, 558.5, 460.0, 200.0, 552.3333333333334, 389.0, 600.0, 391.0, 598.0, 593.5, 377.0, 475.5, 522.25])

# ---------------------------
# 3) Data for the 95-gangs run
# ---------------------------
basic_core_util_95 = np.mean([43.83177570093458, 45.046728971962615, 47.19626168224299, 48.97196261682243, 47.28971962616823, 52.99065420560748, 51.6822429906542, 44.48598130841121, 45.32710280373832, 45.42056074766355, 48.22429906542056, 35.42056074766355, 52.71028037383177, 42.149532710280376, 53.83177570093458, 43.177570093457945, 37.28971962616822, 48.97196261682243, 37.75700934579439, 44.85981308411215, 42.242990654205606, 42.05607476635514, 41.77570093457944, 51.4018691588785, 44.48598130841121, 30.186915887850468, 42.523364485981304, 45.140186915887845, 41.86915887850468, 57.10280373831775, 30.467289719626166, 54.76635514018692, 39.81308411214953, 49.1588785046729, 40.373831775700936, 47.570093457943926, 39.626168224299064, 33.36448598130841, 25.794392523364486, 32.61682242990654, 31.68224299065421, 18.785046728971963, 18.13084112149533, 20.747663551401867, 19.065420560747665, 9.25233644859813, 4.859813084112149, 1.4018691588785046, 2.4299065420560746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
modified_core_util_95 = np.mean([55.29953917050692, 59.21658986175116, 52.995391705069125, 56.22119815668203, 68.66359447004609, 49.65437788018433, 51.49769585253456, 56.336405529953915, 57.48847926267281, 60.59907834101382, 53.91705069124424, 60.023041474654384, 59.44700460829493, 53.45622119815668, 58.17972350230415, 64.63133640552995, 54.377880184331794, 57.25806451612904, 59.44700460829493, 49.53917050691244, 56.22119815668203, 53.2258064516129, 51.61290322580645, 52.30414746543779, 44.23963133640553, 57.14285714285714, 46.42857142857143, 55.29953917050692, 54.723502304147466, 66.82027649769586, 47.69585253456221, 57.373271889400925, 57.48847926267281, 42.626728110599075, 56.79723502304147, 60.483870967741936, 49.76958525345622, 36.86635944700461, 41.3594470046083, 42.857142857142854, 24.88479262672811, 22.119815668202765, 26.72811059907834, 20.852534562211982, 18.77880184331797, 14.631336405529954, 10.368663594470046, 3.8018433179723505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
basic_throughput_95 = 0.22
modified_throughput_95 = 0.27
basic_gang_response_95 = np.mean([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200])
modified_gang_response_95 = np.mean([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200])
basic_gang_turnaround_95 = np.mean([829, 230, 825, 643, 469, 1025, 850, 465, 1014, 514, 683, 501, 709, 707, 493, 1069, 719, 954, 950, 938, 707, 983, 711, 511, 706, 319, 689, 936, 880, 978, 874, 937, 854, 297, 534, 745, 929, 760, 525, 734, 857, 893, 918, 985, 1070, 991, 919, 969, 360, 995, 791, 907, 800, 910, 910, 778, 909, 797, 780, 798, 373, 381, 888, 780, 610, 607, 378, 787, 819, 601, 828, 986, 975, 832, 619, 839, 639, 895, 948, 675, 999, 676, 675, 233, 810, 477, 950, 641, 803, 928, 656, 671, 942])
modified_gang_turnaround_95 = np.mean([659, 226, 646, 643, 278, 798, 679, 272, 467, 464, 511, 280, 669, 663, 493, 769, 508, 690, 827, 698, 707, 699, 518, 511, 699, 319, 689, 693, 827, 718, 823, 818, 709, 293, 534, 552, 805, 707, 525, 557, 713, 537, 814, 810, 868, 829, 810, 759, 357, 753, 594, 824, 756, 726, 822, 737, 810, 732, 740, 580, 373, 375, 724, 584, 604, 607, 378, 782, 779, 601, 788, 784, 819, 771, 619, 792, 621, 797, 796, 631, 826, 673, 675, 233, 678, 466, 802, 472, 761, 795, 473, 662, 770])
basic_gang_waiting_95 = np.mean([510.0, 160.0, 380.0, 413.3333333333333, 240.0, 670.0, 540.0, 280.0, 373.3333333333333, 300.0, 386.6666666666667, 400.0, 470.0, 480.0, 400.0, 460.0, 380.0, 470.0, 720.0, 520.0, 440.0, 700.0, 453.3333333333333, 400.0, 450.0, 240.0, 413.3333333333333, 466.6666666666667, 460.0, 720.0, 400.0, 660.0, 460.0, 240.0, 440.0, 546.6666666666666, 470.0, 493.3333333333333, 440.0, 600.0, 413.3333333333333, 390.0, 500.0, 680.0, 620.0, 480.0, 620.0, 706.6666666666666, 280.0, 586.6666666666666, 550.0, 453.3333333333333, 640.0, 560.0, 640.0, 480.0, 666.6666666666666, 560.0, 480.0, 493.3333333333333, 320.0, 320.0, 720.0, 580.0, 520.0, 420.0, 320.0, 610.0, 680.0, 520.0, 573.3333333333334, 720.0, 653.3333333333334, 626.6666666666666, 440.0, 520.0, 520.0, 540.0, 660.0, 426.6666666666667, 660.0, 560.0, 460.0, 200.0, 600.0, 400.0, 666.6666666666666, 560.0, 620.0, 660.0, 560.0, 480.0, 600.0])
modified_gang_waiting_95 = np.mean([410.5, 156.0, 335.25, 413.3333333333333, 190.5, 509.0, 379.75, 177.0, 183.66666666666666, 275.0, 326.6666666666667, 179.0, 440.0, 455.5, 294.0, 296.25, 274.5, 303.25, 597.0, 368.25, 342.25, 475.5, 264.6666666666667, 396.6666666666667, 438.25, 237.5, 345.3333333333333, 312.6666666666667, 373.5, 460.0, 384.5, 515.0, 378.5, 236.0, 440.0, 340.3333333333333, 426.75, 457.3333333333333, 440.0, 423.0, 365.3333333333333, 293.5, 448.0, 504.0, 496.5, 399.25, 503.25, 532.0, 277.0, 448.3333333333333, 389.5, 425.6666666666667, 598.0, 438.6666666666667, 562.0, 463.3333333333333, 494.0, 488.75, 460.0, 351.0, 320.0, 314.0, 556.0, 376.0, 516.5, 420.0, 320.0, 569.5, 640.0, 520.0, 560.0, 550.6666666666666, 581.3333333333334, 472.0, 439.5, 498.25, 502.0, 484.5, 556.0, 412.0, 545.5, 558.5, 460.0, 200.0, 552.3333333333334, 389.0, 600.0, 391.0, 598.0, 593.5, 377.0, 475.5, 522.25])

###############################################################################
# 4) PLOTTING: for each scenario, we make 5 distinct charts:
#     (1) core utilization line chart
#     (2) throughput bar chart
#     (3) gang response line chart
#     (4) gang turnaround line chart
#     (5) gang waiting line chart
###############################################################################


# Example data (you would substitute your own averages)
# labels = ['Core Utilization', 'Throughput', 'Turnaround Time', 'Waiting Time']
# basic_means = [basic_core_util_64, basic_throughput_64, basic_gang_turnaround_64, basic_gang_waiting_64]
# modified_means = [basic_core_util_64, modified_throughput_64, modified_gang_turnaround_64, modified_gang_waiting_64]

# x = np.arange(len(labels))  # Label locations
# width = 0.35  # Bar width

# fig, ax = plt.subplots()
# rects1 = ax.bar(x - width/2, basic_means, width, label='Basic')
# rects2 = ax.bar(x + width/2, modified_means, width, label='Modified')

# # Add some text for labels, title, and axes
# ax.set_ylabel('Values')
# ax.set_title('Comparison of Basic vs Modified Gang Scheduling')
# ax.set_xticks(x)
# ax.set_xticklabels(labels)
# ax.legend()

# fig.tight_layout()
# plt.show()



# Average values for each gang size
gang_sizes = ['64 Gangs', '83 Gangs', '95 Gangs']

metrics = {
    'Core Utilization': {
        'Basic': [basic_core_util_64, basic_core_util_83, basic_core_util_95],
        'Modified': [modified_core_util_64, modified_core_util_83, modified_core_util_95],
        'ylabel': 'Average Core Utilization (%)'
    },
    'Throughput': {
        'Basic': [basic_throughput_64, basic_throughput_83, basic_throughput_95],
        'Modified': [modified_throughput_64, modified_throughput_83, modified_throughput_95],
        'ylabel': 'Average Throughput'
    # },
    # 'Response Time': {
    #     'Basic': [basic_gang_response_64, basic_gang_response_83, basic_gang_response_95],
    #     'Modified': [modified_gang_response_64, modified_gang_response_83, modified_gang_response_95],
    #     'ylabel': 'Average Response Time'
    },
    'Turnaround Time': {
        'Basic': [basic_gang_turnaround_64, basic_gang_turnaround_83, basic_gang_turnaround_95],
        'Modified': [modified_gang_turnaround_64, modified_gang_turnaround_83, modified_gang_turnaround_95],
        'ylabel': 'Average Turnaround Time'
    },
    'Waiting Time': {
        'Basic': [basic_gang_waiting_64, basic_gang_waiting_83, basic_gang_waiting_95],
        'Modified': [modified_gang_waiting_64, modified_gang_waiting_83, modified_gang_waiting_95],
        'ylabel': 'Average Waiting Time'
    },
}

x = np.arange(len(gang_sizes))  # the label locations
width = 0.35  # width of the bars

for metric, data in metrics.items():
    fig, ax = plt.subplots()
    rects1 = ax.bar(x - width/2, data['Basic'], width, label='Basic', color='skyblue')
    rects2 = ax.bar(x + width/2, data['Modified'], width, label='Modified', color='lightgreen')

    ax.set_ylabel(data['ylabel'])
    ax.set_title(f'Average {metric} by Gang Size')
    ax.set_xticks(x)
    ax.set_xticklabels(gang_sizes)
    ax.legend()

    fig.tight_layout()
    plt.show()





# def plot_scenario(
#     scenario_label,
#     basic_core_util, modified_core_util,
#     basic_throughput, modified_throughput,
#     basic_resp, modified_resp,
#     basic_ta, modified_ta,
#     basic_wait, modified_wait
# ):
#     """
#     Creates 5 separate figures for the given scenario (64, 83, or 95).
#     """
#     import matplotlib.pyplot as plt
#     import numpy as np
    
#     # Chart 1: Core Utilization (line chart)
#     plt.figure()
#     x_vals = range(len(basic_core_util))
#     plt.plot(x_vals, basic_core_util, label='Basic', marker='o')
#     plt.plot(x_vals, modified_core_util, label='Modified', marker='x')
#     plt.xlabel("Core Index")
#     plt.ylabel("Utilization (%)")
#     plt.title(f"{scenario_label} Gangs - Core Utilization")
#     plt.legend()
#     plt.show()
    
#     # Chart 2: Throughput (2-bar chart)
#     plt.figure()
#     vals = [basic_throughput, modified_throughput]
#     labels = ["Basic", "Modified"]
#     plt.bar(labels, vals)
#     plt.ylabel("Processes / unit time")
#     plt.title(f"{scenario_label} Gangs - System Throughput")
#     for i, v in enumerate(vals):
#         plt.text(i, v + 0.001, f"{v:.2f}", ha='center')
#     plt.show()
    
#     # Chart 3: Gang Response Times (line chart)
#     plt.figure()
#     x_vals = range(len(basic_resp))
#     plt.plot(x_vals, basic_resp, label='Basic', marker='o')
#     plt.plot(x_vals, modified_resp, label='Modified', marker='x')
#     plt.xlabel("Gang Index")
#     plt.ylabel("Response Time")
#     plt.title(f"{scenario_label} Gangs - Gang Response Times")
#     plt.legend()
#     plt.show()
    
#     # Chart 4: Gang Turnaround Times (line chart)
#     plt.figure()
#     x_vals = range(len(basic_ta))
#     plt.plot(x_vals, basic_ta, label='Basic', marker='o')
#     plt.plot(x_vals, modified_ta, label='Modified', marker='x')
#     plt.xlabel("Gang Index")
#     plt.ylabel("Turnaround Time")
#     plt.title(f"{scenario_label} Gangs - Gang Turnaround Times")
#     plt.legend()
#     plt.show()
    
#     # Chart 5: Gang Waiting Times (line chart)
#     plt.figure()
#     x_vals = range(len(basic_wait))
#     plt.plot(x_vals, basic_wait, label='Basic', marker='o')
#     plt.plot(x_vals, modified_wait, label='Modified', marker='x')
#     plt.xlabel("Gang Index")
#     plt.ylabel("Waiting Time")
#     plt.title(f"{scenario_label} Gangs - Gang Waiting Times")
#     plt.legend()
#     plt.show()


# # ----------------------------------------------------
# # 5) Actually generate the plots for each scenario
# # ----------------------------------------------------
# plot_scenario(
#     "64",
#     basic_core_util_64, modified_core_util_64,
#     basic_throughput_64, modified_throughput_64,
#     basic_gang_response_64, modified_gang_response_64,
#     basic_gang_turnaround_64, modified_gang_turnaround_64,
#     basic_gang_waiting_64, modified_gang_waiting_64
# )

# plot_scenario(
#     "83",
#     basic_core_util_83, modified_core_util_83,
#     basic_throughput_83, modified_throughput_83,
#     basic_gang_response_83, modified_gang_response_83,
#     basic_gang_turnaround_83, modified_gang_turnaround_83,
#     basic_gang_waiting_83, modified_gang_waiting_83
# )

# plot_scenario(
#     "95",
#     basic_core_util_95, modified_core_util_95,
#     basic_throughput_95, modified_throughput_95,
#     basic_gang_response_95, modified_gang_response_95,
#     basic_gang_turnaround_95, modified_gang_turnaround_95,
#     basic_gang_waiting_95, modified_gang_waiting_95
# )
